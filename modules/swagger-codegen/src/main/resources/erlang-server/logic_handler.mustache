-module({{packageName}}_logic_handler).

-export([handle_request/4]).
-export([validation_error_message/3]).

-type operation_id()    :: {{packageName}}:operation_id().
-type api_key()         :: {{packageName}}:api_key().
-type auth_context()    :: {{packageName}}:auth_context().
-type object()          :: {{packageName}}:object().
-type request_context() :: {{packageName}}:request_context().
-type handler_opts(T)   :: {{packageName}}:handler_opts(T).
-type logic_handler(T)  :: {{packageName}}:logic_handler(T).
-type response()        :: {{packageName}}:response().
-type param_name()      :: {{packageName}}:param_name().
-type validation_error() :: {{packageName}}_validation:error().
-type error_message()   :: {{packageName}}:error_reason().

%% Behaviour definition

{{#authMethods}}
    {{#isApiKey}}
-export([authorize_api_key/3]).
    {{/isApiKey}}
{{/authMethods}}

{{#authMethods}}
    {{#isApiKey}}
-callback authorize_api_key(operation_id(), api_key(), handler_opts(_)) ->
    boolean() | {boolean(), auth_context()}.
    {{/isApiKey}}
{{/authMethods}}

-callback handle_request(operation_id(), object(), request_context(), handler_opts(_)) ->
    {ok | error, response()}.

-callback validation_error_message(param_name(), validation_error()) ->
    error_message().

-optional_callbacks([validation_error_message/2]).

%% API

-spec handle_request(logic_handler(_), operation_id(), object(), request_context()) ->
    {ok | error, response()}.

handle_request(Handler, OperationID, Request, Context) ->
    {Module, Opts} = get_mod_opts(Handler),
    Module:handle_request(OperationID, Request, Context, Opts).

-spec validation_error_message(module(), param_name(), validation_error()) ->
    error_message().

validation_error_message(Handler, Name, Error) ->
    {Module, _Opts} = get_mod_opts(Handler),
    case erlang:function_exported(Module, validation_error_message, 2) of
        true ->
            Module:validation_error_message(Name, Error);
        false ->
            ErrorType = maps:get(type, Error),
            Description = maps:get(description, Error, <<>>),
            jsx:encode(#{
                <<"name">>        => {{packageName}}_utils:to_binary(Name),
                <<"errorType">>   => {{packageName}}_utils:to_binary(ErrorType),
                <<"description">> => {{packageName}}_utils:to_binary(Description)
            })
    end.

{{#authMethods}}
    {{#isApiKey}}
-spec authorize_api_key(logic_handler(_), operation_id(), api_key()) ->
    false | {true, auth_context()}.
authorize_api_key(Handler, OperationID, ApiKey) ->
    {Module, Opts} = get_mod_opts(Handler),
    Module:authorize_api_key(OperationID, ApiKey, Opts).
    {{/isApiKey}}
{{/authMethods}}

%% Internal functions

get_mod_opts(ModOpts= {_, _}) ->
    ModOpts;
get_mod_opts(Module) ->
    {Module, undefined}.
