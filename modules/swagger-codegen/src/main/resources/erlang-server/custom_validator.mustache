-module({{packageName}}_custom_validator).
-export([validate_param/5]).
-export([validate_schema/3]).

-type param_rule()  :: {{packageName}}_param_validator:param_rule().
-type schema_rule() :: {{packageName}}_schema_validator:schema_rule().
-type name()        :: {{packageName}}:param_name().
-type value()       :: {{packageName}}:value().
-type msg_type()    :: {{packageName}}_validation:msg_type().
-type path()        :: [binary() | non_neg_integer()].

-type validation_opts() :: {{packageName}}_validation:validation_opts().

-type validate_param_result() ::
    ok | {ok, term()} | pass | error | {error, Error :: term()}.

-type validate_schema_result() ::
    jesse_state:state() | pass | no_return().

%% BEHAVIOUR

-callback validate_param(param_rule(), name(), value(), msg_type()) ->
    validate_param_result().

-callback validate_schema(schema_rule(), name(), path(), value(), msg_type(), jesse_state:state()) ->
    validate_schema_result().

%% API

-spec validate_param(param_rule(), name(), value(), msg_type(), validation_opts()) ->
    validate_param_result().
validate_param(Rule, Name, Value, MsgType, ValidationOpts) ->
    case get_validatior(ValidationOpts) of
        undefined -> pass;
        Module -> Module:validate_param(Rule, Name, Value, MsgType)
    end.

-spec validate_schema(schema_rule(), value(), jesse_state:state()) ->
    validate_schema_result().
validate_schema(Rule, Value, JesseState) ->
    #{
        msg_type := MsgType,
        def_name := DefName,
        custom_validator := CustomValidator
    } = jesse_state:get_validator_state(JesseState),
    CurrentPath = lists:reverse(jesse_state:get_current_path(JesseState)),
    case CustomValidator of
        undefined -> pass;
        Module -> Module:validate_schema(Rule, DefName, CurrentPath, Value, MsgType, JesseState)
    end.

%%

get_validatior(ValidationOpts) ->
    maps:get(custom_validator, ValidationOpts, undefined).
